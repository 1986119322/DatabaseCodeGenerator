<#@ template language="C#" #>
<#@ include file="GeneratedCodeWarning.tt" #>

using System.Collections.Generic;
using <#= Utils.RootNamespace #>.<#= Utils.ClassesNamespace #>;
using <#= Utils.RootNamespace #>.<#= Utils.StorageNamespace #>;
using <#= Utils.RootNamespace #>.<#= Utils.TypesNamespace #>;

namespace <#= Utils.RootNamespace #>
{
	public partial interface I<#= Utils.DatabaseClassName #>
	{
<#
		foreach (var item in Schema.Configurations)
        {
#>
		<#= Utils.DataClassName(item) + " " + item.name #> { get; }
<#
        }
#>

<#
		foreach (var item in Schema.Objects)
        {
#>
		IEnumerable<<#= Utils.DataClassName(item) #>> <#= Utils.ObjectListPropertyName(item.name) #> { get; }
<#
        }
#>

<#
		foreach (var item in Schema.Objects)
        {
#>
		<#= Utils.DataClassName(item) + " " + Utils.ObjectGetterName(item.name) #>(ItemId<<#= Utils.DataClassName(item) #>> id);
<#
        }
#>

        <#= Utils.ImageType #> GetImage(string name);
        <#= Utils.AudioClipType #> GetAudioClip(string name);
        string GetLocalization(string language);
	}

    public partial class <#= Utils.DatabaseClassName #> : I<#= Utils.DatabaseClassName #>
    {
        partial void OnDataLoaded();
        partial void OnDataInitialized();

        protected void Load(IDataStorage storage, IJsonSerializer serializer)
        {
            Clear();
            Storage = storage;
            Content = new DatabaseContent(Storage, serializer);

			OnDataLoaded();

<#
			foreach (var item in Schema.Objects)
			{
#>
            foreach (var item in Content.<#= Utils.ObjectListPropertyName(item.name) #>)
                <#= Utils.ObjectGetterName(item.name) #>(new ItemId<<#= Utils.DataClassName(item)#>>(item.Id));
<#
			}
#>

<#
			foreach (var item in Schema.Configurations)
			{
#>
			<#= item.name + " = " + Utils.DataClassName(item) #>.Create(Content.<#= item.name #>, this);
<#
			}
#>

            OnDataInitialized();
        }

<#
		foreach (var item in Schema.Configurations)
        {
#>
		public <#= Utils.DataClassName(item) + " " + item.name #> { get; private set; }
<#
        }
#>

<#
		foreach (var item in Schema.Objects)
        {
#>
		public IEnumerable<<#= Utils.DataClassName(item) #>> <#= Utils.ObjectListPropertyName(item.name) #> => <#= DataMember(item.name) #>.Values;
<#
        }
#>

<#
		foreach (var item in Schema.Objects)
        {
#>
		public <#= Utils.DataClassName(item) + " " + Utils.ObjectGetterName(item.name) #>(ItemId<<#= Utils.DataClassName(item) #>> id) 
		{
            if (<#= DataMember(item.name) #>.TryGetValue(id.Value, out var item)) return item;
            var serializable = Content?.<#= Utils.ObjectGetterName(item.name) #>(id.Value);
            return serializable == null ? <#= Utils.DataClassName(item) #>.DefaultValue : <#= Utils.DataClassName(item) #>.Create(serializable, this);
		}
<#
        }
#>

<#
		foreach (var item in Schema.Objects)
        {
#>
		public void <#= Utils.ObjectSetterName(item.name) #>(int id, <#= Utils.DataClassName(item) #> item) { <#= DataMember(item.name) #>.Add(id, item); }
<#
        }
#>

        public <#= Utils.ImageType #> GetImage(string name) { return Content?.GetImage(name) ?? <#= Utils.ImageType #>.Empty; }
        public <#= Utils.AudioClipType #> GetAudioClip(string name) { return Content?.GetAudioClip(name) ?? <#= Utils.AudioClipType #>.Empty; }
        public string GetLocalization(string language) { return Content?.GetLocalization(language); }

		protected DatabaseContent Content { get; private set; }
        protected IDataStorage Storage { get; private set; }

        private void Clear()
        {
            Content = null;
            Storage = null;

<#
			foreach (var item in Schema.Objects)
			{
#>
			<#= DataMember(item.name) #>.Clear();
<#
			}
#>

<#
			foreach (var item in Schema.Configurations)
			{
#>
			<#= item.name #> = null;
<#
			}
#>
        }

<#
		foreach (var item in Schema.Objects)
        {
#>
		private readonly Dictionary<int, <#= Utils.DataClassName(item) #>> <#= DataMember(item.name) #> = new Dictionary<int, <#= Utils.DataClassName(item) #>>();
<#
        }
#>
	}
}

<#+ 
	private static string DataMember(string name) 
	{ 		
		return "_" + char.ToLower(name[0]) + name.Substring(1) + "Map"; 
	}
#>