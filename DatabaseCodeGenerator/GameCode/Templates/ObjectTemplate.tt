<#@ template language="C#" #>
<#@ include file="Serialization.tt" #>
<#@ include file="GeneratedCodeWarning.tt" #>

using System.Linq;
using <#= Utils.RootNamespace #>.<#= Utils.EnumsNamespace #>;
using <#= Utils.RootNamespace #>.<#= Utils.SerializableNamespace #>;
using <#= Utils.RootNamespace #>.<#= Utils.TypesNamespace #>;

namespace <#= Utils.RootNamespace #>.<#= Utils.ClassesNamespace #>
{
	public partial class <#= Utils.DataClassName(ObjectData) #>
	{
		partial void OnDataDeserialized(<#= Utils.SerializableClassName(ObjectData.name) #> serializable, <#= Utils.DatabaseClassName #>.Loader loader);

		public static <#= Utils.DataClassName(ObjectData) #> <#= Utils.FactoryMethodName #>(<#= Utils.SerializableClassName(ObjectData.name) #> serializable, <#= Utils.DatabaseClassName #>.Loader loader)
		{
			return new <#= Utils.DataClassName(ObjectData) #>(serializable, loader);
		}

		private <#= Utils.DataClassName(ObjectData) #>(<#= Utils.SerializableClassName(ObjectData.name) #> serializable, <#= Utils.DatabaseClassName #>.Loader loader)
		{
<#
			if (ObjectType == ObjectType.Class)
            {
#>
			Id = new ItemId<<#= Utils.DataClassName(ObjectData) #>>(serializable.Id);
			loader.<#= Utils.ObjectSetterName(ObjectData.name) #>(serializable.Id, this);

<#
			}
#>
<#
			PushIndent("\t\t\t");

			foreach (var item in ObjectData.members)
				WriteDeserializationCode(item, Schema);

			PopIndent();
#>

			OnDataDeserialized(serializable, loader);
		}

<#
		if (ObjectType == ObjectType.Class)
        {
#>
		public readonly ItemId<<#= Utils.DataClassName(ObjectData) #>> Id;

<#
		}
#>
<#
		PushIndent("\t\t");

		foreach (var item in ObjectData.members) 
			WriteDataClassMember(item, Schema);

		PopIndent();
#>

		public static <#= Utils.DataClassName(ObjectData) #> DefaultValue { get; private set; }
	}
}
