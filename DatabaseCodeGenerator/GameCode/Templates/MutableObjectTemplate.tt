<#@ template language="C#" #>
<#@ include file="Serialization.tt" #>
<#@ include file="GeneratedCodeWarning.tt" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>

using System.Linq;
using <#= Utils.RootNamespace #>.<#= Utils.EnumsNamespace #>;
using <#= Utils.RootNamespace #>.<#= Utils.SerializableNamespace #>;
using <#= Utils.RootNamespace #>.<#= Utils.TypesNamespace #>;

namespace <#= Utils.RootNamespace #>.<#= Utils.ClassesNamespace #>
{
	public abstract partial class <#= Utils.DataClassName(ObjectData.name) #>
	{
		partial void OnDataDeserialized(<#= Utils.SerializableClassName(ObjectData.name) #> serializable, <#= Utils.DatabaseClassName #> database);

		public static <#= Utils.DataClassName(ObjectData.name) #> <#= Utils.FactoryMethodName #>(<#= Utils.SerializableClassName(ObjectData.name) #> serializable, <#= Utils.DatabaseClassName #> database)
		{
<#
            SortMembers(ObjectData, out var baseMembers, out var extraMembers);
            var switchEnumType = baseMembers.First(item => item.name.Equals(ObjectData.switchEnum, StringComparison.Ordinal)).typeid;
			var factoryName = "I" + Utils.DataClassName(ObjectData.name) + "Factory<T>";
#>
			switch (serializable.<#= ObjectData.switchEnum #>)
		    {
<#
			foreach (var item in extraMembers)
            {
#>
				case <#= switchEnumType + "." + item.Key #>:
					return new <#= ExtraClassName(item.Key) #>(serializable, database);
<#
			}
#>
				default:
                    throw new DatabaseException("<#= ObjectData.name #>: Invalid content type - " + serializable.<#= ObjectData.switchEnum #>);
			}
		}

		public abstract T Create<T>(<#= factoryName #> factory);

		protected <#= Utils.DataClassName(ObjectData.name) #>(<#= Utils.SerializableClassName(ObjectData.name) #> serializable, <#= Utils.DatabaseClassName #> database)
		{
<#
			if (ObjectType == ObjectType.Class)
            {
#>
			Id = new ItemId<<#= Utils.DataClassName(ObjectData.name) #>>(serializable.Id);
			database.<#= Utils.ObjectSetterName(ObjectData.name) #>(serializable.Id, this);

<#
			}
#>
<#
			PushIndent("\t\t\t");

			foreach (var item in baseMembers)
				WriteDeserializationCode(item);

			PopIndent();
#>

			OnDataDeserialized(serializable, database);
		}

<#
		if (ObjectType == ObjectType.Class)
        {
#>
		public readonly ItemId<<#= Utils.DataClassName(ObjectData.name) #>> Id;

<#
		}
#>
<#
		PushIndent("\t\t");

		foreach (var item in baseMembers) 
			WriteDataClassMember(item, Schema);

		PopIndent();
#>
	}

	public interface <#= factoryName #>
    {
<#
		foreach (var item in extraMembers)
        {
#>
	    T Create(<#= ExtraClassName(item.Key) #> content);
<#
		}
#>
    }

<#
	foreach (var content in extraMembers)
    {
#>
    public partial class <#= ExtraClassName(content.Key) + " : " + Utils.DataClassName(ObjectData.name) #>
    {
		partial void OnDataDeserialized(<#= Utils.SerializableClassName(ObjectData.name) #> serializable, <#= Utils.DatabaseClassName #> database);

  		public <#= ExtraClassName(content.Key) #>(<#= Utils.SerializableClassName(ObjectData.name) #> serializable, <#= Utils.DatabaseClassName #> database)
            : base(serializable, database)
        {
<#
			PushIndent("\t\t\t");

			foreach (var item in content.Value)
				WriteDeserializationCode(item);

			PopIndent();
#>

            OnDataDeserialized(serializable, database);
        }

        public override T Create<T>(<#= factoryName #> factory)
        {
            return factory.Create(this);
        }

<#
		PushIndent("\t\t");

		foreach (var item in content.Value)
			WriteDataClassMember(item, Schema);

		PopIndent();
#>
    }
<#
	}
#>

}

<#+
    private static void SortMembers(XmlClassItem data, out List<XmlClassMember> baseMembers, out Dictionary<string, List<XmlClassMember>> extraMembers)
    {
        extraMembers = new Dictionary<string, List<XmlClassMember>>();
        baseMembers = new List<XmlClassMember>();

        foreach (var item in data.members)
        {
            if (string.IsNullOrEmpty(item.caseValue))
            {
                baseMembers.Add(item);
                continue;
            }

            var caseValues = item.caseValue.Split(Constants.ValueSeparators, StringSplitOptions.RemoveEmptyEntries);
            foreach (var value in caseValues)
            {
                if (!extraMembers.TryGetValue(value, out var list))
                    extraMembers.Add(value, list = new List<XmlClassMember>());

                list.Add(item);
            }
        }
    }

	private string ExtraClassName(string type) { return Utils.DataClassName(ObjectData.name) + "_" + type; }
#>