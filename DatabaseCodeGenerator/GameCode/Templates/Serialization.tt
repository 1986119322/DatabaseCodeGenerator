<#@ template language="C#" #>
<#@ import namespace="Schema" #><#+
		private void WriteSerializableClassMember(XmlClassMember member, DatabaseSchema schema)
		{
			if (member.type == Constants.TypeInt)
			{
				WriteLine("public int " + member.name + ";");
			}
			else if (member.type == Constants.TypeFloat)
			{
				WriteLine("public float " + member.name + ";");
			}
			else if (member.type == Constants.TypeBool)
			{
				WriteLine("public bool " + member.name + ";");
			}
			else if (member.type == Constants.TypeString)
			{
				WriteLine("public string " + member.name + ";");
			}
			else if (member.type == Constants.TypeColor)
			{
				WriteLine("public string " + member.name + ";");
			}
			else if (member.type == Constants.TypeImage)
			{
				WriteLine("public string " + member.name + ";");
			}
			else if (member.type == Constants.TypeAudioClip)
			{
				WriteLine("public string " + member.name + ";");
			}
			else if (member.type == Constants.TypePrefab)
			{
				WriteLine("public string " + member.name + ";");
			}
			else if (member.type == Constants.TypeLayout)
			{
				WriteLine("public string " + member.name + ";");
			}
			else if (member.type == Constants.TypeVector)
			{
				WriteLine("public UnityEngine.Vector2 " + member.name + ";");
			}
			else if (member.type == Constants.TypeEnum)
			{
				if (!schema.HasEnum(member.typeid))
					throw new InvalidSchemaException("Unknown enum type in class member " + member.name);

				WriteLine("public " + member.typeid + " " + member.name + ";");
			}
			else if (member.type == Constants.TypeObject)
			{
				if (!schema.HasObject(member.typeid))
					throw new InvalidSchemaException("Unknown object type in class member " + member.name);

				WriteLine("public int " + member.name + ";");
			}
			else if (member.type == Constants.TypeObjectList)
			{
				if (!schema.HasObject(member.typeid))
					throw new InvalidSchemaException("Unknown object type in class member " + member.name);

				WriteLine("public int[] " + member.name + ";");
			}
			else if (member.type == Constants.TypeStruct)
			{
				if (!schema.HasStruct(member.typeid))
					throw new InvalidSchemaException("Unknown struct type in class member " + member.name);

				WriteLine("public " + Utils.SerializableClassName(member.typeid) + " " + member.name + ";");
			}
			else if (member.type == Constants.TypeStructList)
			{
				if (!schema.HasStruct(member.typeid))
					throw new InvalidSchemaException("Unknown struct type in class member " + member.name);

				WriteLine("public " + Utils.SerializableClassName(member.typeid) + "[] " + member.name + ";");
			}
			else
			{
				throw new InvalidSchemaException("Invalid class member type - " + member.type);
			}
		}

		private void WriteDataClassMember(XmlClassMember member, DatabaseSchema schema)
		{
			var obsolete = member.options.Contains(Constants.OptionObsolete);
			var memberName = !string.IsNullOrEmpty(member.alias) ? member.alias : member.name;
			if (obsolete) memberName = PrivateMemberName(memberName);
			var prefix = obsolete ? "private readonly " : "public ";
			var suffix = obsolete ? ";" : " { get; private set; }";

			if (member.type == Constants.TypeInt)
			{
				WriteLine(prefix + "int " + memberName + suffix);
			}
			else if (member.type == Constants.TypeFloat)
			{
				WriteLine(prefix + "float " + memberName + suffix);
			}
			else if (member.type == Constants.TypeBool)
			{
				WriteLine(prefix + "bool " + memberName + suffix);
			}
			else if (member.type == Constants.TypeString)
			{
				WriteLine(prefix + "string " + memberName + suffix);
			}
			else if (member.type == Constants.TypeColor)
			{
				WriteLine(prefix + "ColorData " + memberName + suffix);
			}
			else if (member.type == Constants.TypeImage)
			{
				WriteLine(prefix + "SpriteId " + memberName + suffix);
			}
			else if (member.type == Constants.TypeAudioClip)
			{
				WriteLine(prefix + "AudioClipId " + memberName + suffix);
			}
			else if (member.type == Constants.TypePrefab)
			{
				WriteLine(prefix + "PrefabId " + memberName + suffix);
			}
			else if (member.type == Constants.TypeLayout)
			{
				WriteLine(prefix + "Layout " + memberName + suffix);
			}
			else if (member.type == Constants.TypeVector)
			{
				WriteLine(prefix + "UnityEngine.Vector2 " + memberName + suffix);
			}
			else if (member.type == Constants.TypeEnum)
			{
				if (!schema.HasEnum(member.typeid))
					throw new InvalidSchemaException("Unknown enum type in class member " + member.name);

				WriteLine(prefix + member.typeid + " " + memberName + suffix);
			}
			else if (member.type == Constants.TypeObject)
			{
				if (!schema.HasObject(member.typeid))
					throw new InvalidSchemaException("Unknown object type in class member " + member.name);

				var dataClass = schema.GetObject(member.typeid);
				WriteLine(prefix + Utils.DataClassName(dataClass) + " " + memberName + suffix);
			}
			else if (member.type == Constants.TypeObjectList)
			{
				if (!schema.HasObject(member.typeid))
					throw new InvalidSchemaException("Unknown object type in class member " + member.name);

				var dataClass = schema.GetObject(member.typeid);
				
				WriteLine(prefix + "ImmutableCollection<" + Utils.DataClassName(dataClass) + "> " + memberName + suffix);
			}
			else if (member.type == Constants.TypeStruct)
			{
				if (!schema.HasStruct(member.typeid))
					throw new InvalidSchemaException("Unknown struct type in class member " + member.name);

				var dataClass = schema.GetStruct(member.typeid);
				WriteLine(prefix + Utils.DataClassName(dataClass) + " " + memberName + suffix);
			}
			else if (member.type == Constants.TypeStructList)
			{
				if (!schema.HasStruct(member.typeid))
					throw new InvalidSchemaException("Unknown struct type in class member " + member.name);

				var dataClass = schema.GetStruct(member.typeid);

				WriteLine(prefix + "ImmutableCollection<" + Utils.DataClassName(dataClass) + "> " + memberName + suffix);
			}
			else
			{
				throw new InvalidSchemaException("Invalid class member type - " + member.type);
			}
		}

		// TODO: delete this method
		private void WriteLegacyStructMember(XmlClassMember member, DatabaseSchema schema)
		{
			var memberName = !string.IsNullOrEmpty(member.alias) ? member.alias : member.name;

			if (member.type == Constants.TypeInt)
			{
				WriteLine("public int " + memberName + ";");
			}
			else if (member.type == Constants.TypeFloat)
			{
				WriteLine("public float " + memberName + ";");
			}
			else if (member.type == Constants.TypeBool)
			{
				WriteLine("public bool " + memberName + ";");
			}
			else if (member.type == Constants.TypeString)
			{
				WriteLine("public string " + memberName + ";");
			}
			else if (member.type == Constants.TypeColor)
			{
				WriteLine("public ColorData " + memberName + ";");
			}
			else if (member.type == Constants.TypeImage)
			{
				WriteLine("public SpriteId " + memberName + ";");
			}
			else if (member.type == Constants.TypeAudioClip)
			{
				WriteLine("public AudioClipId " + memberName + ";");
			}
			else if (member.type == Constants.TypePrefab)
			{
				WriteLine("public PrefabId " + memberName + ";");
			}
			else if (member.type == Constants.TypeLayout)
			{
				WriteLine("public Layout " + memberName + ";");
			}
			else if (member.type == Constants.TypeVector)
			{
				WriteLine("public UnityEngine.Vector2 " + memberName + ";");
			}
			else if (member.type == Constants.TypeEnum)
			{
				if (!schema.HasEnum(member.typeid))
					throw new InvalidSchemaException("Unknown enum type in class member " + member.name);

				WriteLine("public " + member.typeid + " " + memberName + ";");
			}
			else if (member.type == Constants.TypeObject)
			{
				if (!schema.HasObject(member.typeid))
					throw new InvalidSchemaException("Unknown object type in class member " + member.name);

				var dataClass = schema.GetObject(member.typeid);
				WriteLine("public " + Utils.DataClassName(dataClass) + " " + memberName + ";");
			}
			else if (member.type == Constants.TypeObjectList)
			{
				if (!schema.HasObject(member.typeid))
					throw new InvalidSchemaException("Unknown object type in class member " + member.name);

				var dataClass = schema.GetObject(member.typeid);
				WriteLine("public " + Utils.DataClassName(dataClass) + "[] " + memberName + ";");
			}
			else if (member.type == Constants.TypeStruct)
			{
				if (!schema.HasStruct(member.typeid))
					throw new InvalidSchemaException("Unknown struct type in class member " + member.name);

				var dataClass = schema.GetStruct(member.typeid);
				WriteLine("public " + Utils.DataClassName(dataClass) + " " + memberName + ";");
			}
			else if (member.type == Constants.TypeStructList)
			{
				if (!schema.HasStruct(member.typeid))
					throw new InvalidSchemaException("Unknown struct type in class member " + member.name);

				var dataClass = schema.GetStruct(member.typeid);
				WriteLine("public " + Utils.DataClassName(dataClass) + "[] " + memberName + ";");
			}
			else
			{
				throw new InvalidSchemaException("Invalid class member type - " + member.type);
			}
		}

        private void WriteDeserializationCode(XmlClassMember member, DatabaseSchema schema)
        {
			var memberName = !string.IsNullOrEmpty(member.alias) ? member.alias : member.name;
			if (member.options.Contains(Constants.OptionObsolete)) memberName = PrivateMemberName(memberName);
			var notnull = member.options.Contains(Constants.OptionNotNull);

            if (member.type == Constants.TypeObject)
            {
				var dataClass = schema.GetObject(member.typeid);
                WriteLine(memberName + " = loader." + Utils.ObjectGetterName(member.typeid) + "(new ItemId<" + Utils.DataClassName(dataClass) + ">(serializable." + member.name + "));");
				if (notnull)
				{
					WriteLine("if (" + memberName + " == " + Utils.DataClassName(dataClass) + ".DefaultValue)");
					WriteLine("    UnityEngine.Debug.LogError(this.GetType().Name + \"." + memberName + " cannot be null - \" + serializable." + member.name + ");");
                }
            }
            else if (member.type == Constants.TypeObjectList)
            {
				var dataClass = schema.GetObject(member.typeid);
                WriteLine(memberName + " = new ImmutableCollection<" + Utils.DataClassName(dataClass) + ">(" + "serializable." + member.name + 
					"?.Select(item => loader." + Utils.ObjectGetterName(member.typeid) + "(new ItemId<" + Utils.DataClassName(dataClass) + ">(item))));");
            }
            else if (member.type == Constants.TypeStruct)
            {
				var dataClass = schema.GetStruct(member.typeid);
                WriteLine(memberName + " = " + Utils.DataClassName(dataClass) + "." + Utils.FactoryMethodName +  "(serializable." + member.name + ", loader);");
            }
            else if (member.type == Constants.TypeStructList)
            {
				var dataClass = schema.GetStruct(member.typeid);
                WriteLine(memberName + " = new ImmutableCollection<" + Utils.DataClassName(dataClass) + ">(" + "serializable." + member.name + 
					"?.Select(item => " + Utils.DataClassName(dataClass) + "." + Utils.FactoryMethodName + "(item, loader)));");
            }
            else if (member.type == Constants.TypeInt)
            {
                member.MinMaxInt(out var minvalue, out var maxvalue);
                WriteLine(memberName + " = UnityEngine.Mathf.Clamp(serializable." + member.name + ", " + minvalue + ", " + maxvalue + ");");
            }
            else if (member.type == Constants.TypeFloat)
            {
                member.MinMaxFloat(out var minvalue, out var maxvalue);
                WriteLine(memberName + " = UnityEngine.Mathf.Clamp(serializable." + member.name + ", " + minvalue + "f, " + maxvalue + "f);");
            }
            else if (member.type == Constants.TypeColor)
            {
                WriteLine(memberName + " = new ColorData(serializable." + member.name + ");");
            }
            else if (member.type == Constants.TypeLayout)
            {
                WriteLine(memberName + " = new Layout(serializable." + member.name + ");");
            }
            else if (member.type == Constants.TypeAudioClip)
            {
                WriteLine(memberName + " = new AudioClipId(serializable." + member.name + ");");
            }
            else if (member.type == Constants.TypeImage)
            {
                WriteLine(memberName + " = new SpriteId(serializable." + member.name + ", SpriteId.Type." + member.typeid + ");");
            }
            else if (member.type == Constants.TypePrefab)
            {
                WriteLine(memberName + " = new PrefabId(serializable." + member.name + ", PrefabId.Type." + member.typeid + ");");
            }
            else
            {
                WriteLine(memberName + " = serializable." + member.name + ";");
            }
        }

		// TODO: delete this method
		private void WriteLegacyDeserializationCode(XmlClassMember member, DatabaseSchema schema)
        {
            var memberName = !string.IsNullOrEmpty(member.alias) ? member.alias : member.name;
			var notnull = member.options.Contains(Constants.OptionNotNull);

            if (member.type == Constants.TypeObject)
            {
				var dataClass = schema.GetObject(member.typeid);
                WriteLine(memberName + " = loader." + Utils.ObjectGetterName(member.typeid) + "(new ItemId<" + Utils.DataClassName(dataClass) + ">(serializable." + member.name + "));");
				if (notnull)
				{
					WriteLine("if (" + memberName + " == " + Utils.DataClassName(dataClass) + ".DefaultValue)");
					WriteLine("    UnityEngine.Debug.LogError(this.GetType().Name + \"." + memberName + " cannot be null - \" + serializable." + member.name + ");");
                }
            }
            else if (member.type == Constants.TypeObjectList)
            {
				var dataClass = schema.GetObject(member.typeid);
                WriteLine(memberName + " = " + "serializable." + member.name + "?.Select(item => loader." + Utils.ObjectGetterName(member.typeid) + "(new ItemId<" + Utils.DataClassName(dataClass) + ">(item))).ToArray();");
            }
            else if (member.type == Constants.TypeStruct)
            {
				var dataClass = schema.GetStruct(member.typeid);
                WriteLine(memberName + " = " + Utils.DataClassName(dataClass) + "." + Utils.FactoryMethodName +  "(serializable." + member.name + ", loader);");
            }
            else if (member.type == Constants.TypeStructList)
            {
				var dataClass = schema.GetStruct(member.typeid);
                WriteLine(memberName + " = " + "serializable." + member.name + "?.Select(item => " + Utils.DataClassName(dataClass) + "." + Utils.FactoryMethodName + "(item, loader)).ToArray();");
            }
            else if (member.type == Constants.TypeInt)
            {
                member.MinMaxInt(out var minvalue, out var maxvalue);
                WriteLine(memberName + " = UnityEngine.Mathf.Clamp(serializable." + member.name + ", " + minvalue + ", " + maxvalue + ");");
            }
            else if (member.type == Constants.TypeFloat)
            {
                member.MinMaxFloat(out var minvalue, out var maxvalue);
                WriteLine(memberName + " = UnityEngine.Mathf.Clamp(serializable." + member.name + ", " + minvalue + "f, " + maxvalue + "f);");
            }
            else if (member.type == Constants.TypeColor)
            {
                WriteLine(memberName + " = new ColorData(serializable." + member.name + ");");
            }
            else if (member.type == Constants.TypeLayout)
            {
                WriteLine(memberName + " = new Layout(serializable." + member.name + ");");
            }
            else if (member.type == Constants.TypeAudioClip)
            {
                WriteLine(memberName + " = new AudioClipId(serializable." + member.name + ");");
            }
            else if (member.type == Constants.TypeImage)
            {
                WriteLine(memberName + " = new SpriteId(serializable." + member.name + ", SpriteId.Type." + member.typeid + ");");
            }
            else if (member.type == Constants.TypePrefab)
            {
                WriteLine(memberName + " = new PrefabId(serializable." + member.name + ", PrefabId.Type." + member.typeid + ");");
            }
            else
            {
                WriteLine(memberName + " = serializable." + member.name + ";");
            }
        }

		private static string PrivateMemberName(string name) 
		{ 		
			return "_" + char.ToLower(name[0]) + name.Substring(1); 
		}
#>