<#@ template language="C#" #>
<#@ import namespace="Schema" #><#+
		private void WriteSerializableClassMember(XmlClassMember member, DatabaseSchema schema)
		{
			if (member.type == Constants.TypeInt)
			{
				WriteLine("public int " + member.name + ";");
			}
			else if (member.type == Constants.TypeFloat)
			{
				WriteLine("public float " + member.name + ";");
			}
			else if (member.type == Constants.TypeBool)
			{
				WriteLine("public bool " + member.name + ";");
			}
			else if (member.type == Constants.TypeString)
			{
				WriteLine("public string " + member.name + ";");
			}
			else if (member.type == Constants.TypeColor)
			{
				WriteLine("public string " + member.name + ";");
			}
			else if (member.type == Constants.TypeImage)
			{
				WriteLine("public string " + member.name + ";");
			}
			else if (member.type == Constants.TypeAudioClip)
			{
				WriteLine("public string " + member.name + ";");
			}
			else if (member.type == Constants.TypeLayout)
			{
				WriteLine("public string " + member.name + ";");
			}
			else if (member.type == Constants.TypeVector)
			{
				WriteLine("public Vector2 " + member.name + ";");
			}
			else if (member.type == Constants.TypeEnum)
			{
				if (!schema.HasEnum(member.typeid))
					throw new InvalidSchemaException("Unknown enum type in class member " + member.name);

				WriteLine("public " + member.typeid + " " + member.name + ";");
			}
			else if (member.type == Constants.TypeObject)
			{
				if (!schema.HasObject(member.typeid))
					throw new InvalidSchemaException("Unknown object type in class member " + member.name);

				WriteLine("public int " + member.name + ";");
			}
			else if (member.type == Constants.TypeObjectList)
			{
				if (!schema.HasObject(member.typeid))
					throw new InvalidSchemaException("Unknown object type in class member " + member.name);

				WriteLine("public int[] " + member.name + ";");
			}
			else if (member.type == Constants.TypeStruct)
			{
				if (!schema.HasStruct(member.typeid))
					throw new InvalidSchemaException("Unknown struct type in class member " + member.name);

				WriteLine("public " + Utils.SerializableClassName(member.typeid) + " " + member.name + ";");
			}
			else if (member.type == Constants.TypeStructList)
			{
				if (!schema.HasStruct(member.typeid))
					throw new InvalidSchemaException("Unknown struct type in class member " + member.name);

				WriteLine("public " + Utils.SerializableClassName(member.typeid) + "[] " + member.name + ";");
			}
			else
			{
				throw new InvalidSchemaException("Invalid class member type - " + member.type);
			}
		}

		private void WriteDataClassMember(XmlClassMember member, DatabaseSchema schema, bool isReadonly = true)
		{
			var memberName = !string.IsNullOrEmpty(member.alias) ? member.alias : member.name;
			var prefix = isReadonly ? "public readonly " : "public ";

			if (member.type == Constants.TypeInt)
			{
				WriteLine(prefix + "int " + memberName + ";");
			}
			else if (member.type == Constants.TypeFloat)
			{
				WriteLine(prefix + "float " + memberName + ";");
			}
			else if (member.type == Constants.TypeBool)
			{
				WriteLine(prefix + "bool " + memberName + ";");
			}
			else if (member.type == Constants.TypeString)
			{
				WriteLine(prefix + "string " + memberName + ";");
			}
			else if (member.type == Constants.TypeColor)
			{
				WriteLine(prefix + "Color " + memberName + ";");
			}
			else if (member.type == Constants.TypeImage)
			{
				WriteLine(prefix + "SpriteId " + memberName + ";");
			}
			else if (member.type == Constants.TypeAudioClip)
			{
				WriteLine(prefix + "AudioClipId " + memberName + ";");
			}
			else if (member.type == Constants.TypeLayout)
			{
				WriteLine(prefix + "Layout " + memberName + ";");
			}
			else if (member.type == Constants.TypeVector)
			{
				WriteLine(prefix + "Vector2 " + memberName + ";");
			}
			else if (member.type == Constants.TypeEnum)
			{
				if (!schema.HasEnum(member.typeid))
					throw new InvalidSchemaException("Unknown enum type in class member " + member.name);

				WriteLine(prefix + member.typeid + " " + memberName + ";");
			}
			else if (member.type == Constants.TypeObject)
			{
				if (!schema.HasObject(member.typeid))
					throw new InvalidSchemaException("Unknown object type in class member " + member.name);

				WriteLine(prefix + Utils.DataClassName(member.typeid) + " " + memberName + ";");
			}
			else if (member.type == Constants.TypeObjectList)
			{
				if (!schema.HasObject(member.typeid))
					throw new InvalidSchemaException("Unknown object type in class member " + member.name);

				WriteLine(prefix + "System.Collections.ObjectModel.ReadOnlyCollection<" + Utils.DataClassName(member.typeid) + "> " + memberName + ";");
			}
			else if (member.type == Constants.TypeStruct)
			{
				if (!schema.HasStruct(member.typeid))
					throw new InvalidSchemaException("Unknown struct type in class member " + member.name);

				WriteLine(prefix + Utils.DataClassName(member.typeid) + " " + memberName + ";");
			}
			else if (member.type == Constants.TypeStructList)
			{
				if (!schema.HasStruct(member.typeid))
					throw new InvalidSchemaException("Unknown struct type in class member " + member.name);

				WriteLine(prefix + "System.Collections.ObjectModel.ReadOnlyCollection<" + Utils.DataClassName(member.typeid) + "> " + memberName + ";");
			}
			else
			{
				throw new InvalidSchemaException("Invalid class member type - " + member.type);
			}
		}

        private void WriteDeserializationCode(XmlClassMember member)
        {
            var memberName = !string.IsNullOrEmpty(member.alias) ? member.alias : member.name;
            if (member.type == Constants.TypeObject)
            {
                WriteLine(memberName + " = database." + Utils.ObjectGetterName(member.typeid) + "(new ItemId<" + Utils.DataClassName(member.typeid) + ">(serializable." + member.name + "));");
            }
            else if (member.type == Constants.TypeObjectList)
            {
                WriteLine(memberName + " = " + "serializable." + member.name + "?.Select(item => database." + Utils.ObjectGetterName(member.typeid) + "(new ItemId<" + Utils.DataClassName(member.typeid) + ">(item))).ToList().AsReadOnly();");
            }
            else if (member.type == Constants.TypeStruct)
            {
                WriteLine(memberName + " = " + Utils.DataClassName(member.typeid) + "." + Utils.FactoryMethodName +  "(serializable." + member.name + ", database);");
            }
            else if (member.type == Constants.TypeStructList)
            {
                WriteLine(memberName + " = " + "serializable." + member.name + "?.Select(item => " + Utils.DataClassName(member.typeid) + "." + Utils.FactoryMethodName + "(item, database)).ToList().AsReadOnly();");
            }
            else if (member.type == Constants.TypeInt)
            {
                member.MinMaxInt(out var minvalue, out var maxvalue);
                WriteLine(memberName + " = UnityEngine.Mathf.Clamp(serializable." + member.name + ", " + minvalue + ", " + maxvalue + ");");
            }
            else if (member.type == Constants.TypeFloat)
            {
                member.MinMaxFloat(out var minvalue, out var maxvalue);
                WriteLine(memberName + " = UnityEngine.Mathf.Clamp(serializable." + member.name + ", " + minvalue + "f, " + maxvalue + "f);");
            }
            else if (member.type == Constants.TypeColor)
            {
                WriteLine(memberName + " = new Color(serializable." + member.name + ");");
            }
            else if (member.type == Constants.TypeLayout)
            {
                WriteLine(memberName + " = new Layout(serializable." + member.name + ");");
            }
            else if (member.type == Constants.TypeAudioClip)
            {
                WriteLine(memberName + " = new AudioClipId(serializable." + member.name + ");");
            }
            else if (member.type == Constants.TypeImage)
            {
                WriteLine(memberName + " = new SpriteId(serializable." + member.name + ");");
            }
            else
            {
                WriteLine(memberName + " = serializable." + member.name + ";");
            }
        }
#>